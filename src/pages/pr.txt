auth context
// Add this import at the top with other Firebase auth imports
import { 
    getAuth, 
    signInWithPopup, 
    GoogleAuthProvider, 
    signInWithEmailAndPassword,
    createUserWithEmailAndPassword,
    signOut,
    onAuthStateChanged,
    sendPasswordResetEmail  // ADD THIS
} from 'firebase/auth';

// Add this function inside AuthProvider, before the return statement
const resetPassword = async (email) => {
    try {
        await sendPasswordResetEmail(auth, email);
        return { 
            success: true, 
            message: 'Password reset email sent! Check your inbox.' 
        };
    } catch (error) {
        console.error('Password reset failed:', error);
        return { 
            success: false, 
            error: getAuthErrorMessage(error.code)
        };
    }
};

// Add resetPassword to the value object
const value = {
    user,
    loading,
    login,
    register,
    loginWithEmail,
    registerWithEmail,
    loginWithGoogle,
    loginWithMicrosoft,
    logout,
    resetPassword  // ADD THIS
};

authpage.js
import { useState, useContext, useEffect } from 'react';
import { Container, Row, Col, Alert, Modal } from 'react-bootstrap';  // ADD Modal
import { Navigate, useSearchParams } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';

export const AuthPage = () => {
    const { user, loginWithEmail, registerWithEmail, loginWithGoogle, loginWithMicrosoft, resetPassword } = useContext(AuthContext);  // ADD resetPassword
    
    // ... existing state ...
    
    // ADD these new states for password reset
    const [showResetModal, setShowResetModal] = useState(false);
    const [resetEmail, setResetEmail] = useState('');
    const [resetSuccess, setResetSuccess] = useState('');
    const [resetError, setResetError] = useState('');

    // ADD this function
    const handlePasswordReset = async (e) => {
        e.preventDefault();
        setResetError('');
        setResetSuccess('');

        if (!resetEmail) {
            setResetError('Please enter your email address');
            return;
        }

        # reference auth contex
        const result = await resetPassword(resetEmail);
        
        if (result.success) {
            setResetSuccess(result.message);
            setResetEmail('');
            // Close modal after 3 seconds
            setTimeout(() => {
                setShowResetModal(false);
                setResetSuccess('');
            }, 3000);
        } else {
            setResetError(result.error);
        }
    };

    // ... rest of the existing code ...

    // REPLACE the "Forgot password" button with:
    {isLogin && (
        <div className="form-group text-end">
            <button
                type="button"
                onClick={() => setShowResetModal(true)}
                style={{ 
                    background: 'none',
                    border: 'none',
                    color: 'var(--color-sage)', 
                    fontSize: '14px',
                    textDecoration: 'none',
                    cursor: 'pointer',
                    padding: 0
                }}
            >
                Forgot your password?
            </button>
        </div>
    )}

    // ADD this modal at the end, before the closing </section> tag:
    {/* Password Reset Modal */}
    <Modal show={showResetModal} onHide={() => setShowResetModal(false)} centered>
        <Modal.Header closeButton style={{ background: 'var(--color-dark-blue)' }}>
            <Modal.Title style={{ color: '#fff' }}>Reset Password</Modal.Title>
        </Modal.Header>
        <Modal.Body style={{ background: 'var(--color-blue-gray)' }}>
            {resetSuccess && (
                <Alert variant="success" className="mb-3">
                    {resetSuccess}
                </Alert>
            )}
            {resetError && (
                <Alert variant="danger" className="mb-3">
                    {resetError}
                </Alert>
            )}
            
            <p style={{ color: 'var(--color-light-gray)', marginBottom: '20px' }}>
                Enter your email address and we'll send you a link to reset your password.
            </p>
            
            <form onSubmit={handlePasswordReset}>
                <div className="form-group">
                    <label className="form-label">Email Address</label>
                    <input
                        type="email"
                        className="form-input"
                        value={resetEmail}
                        onChange={(e) => setResetEmail(e.target.value)}
                        placeholder="your@email.com"
                        required
                    />
                </div>
                
                <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '24px' }}>
                    <button 
                        type="button" 
                        className="btn-secondary-large" 
                        onClick={() => {
                            setShowResetModal(false);
                            setResetError('');
                            setResetSuccess('');
                            setResetEmail('');
                        }}
                    >
                        Cancel
                    </button>
                    <button 
                        type="submit" 
                        className="btn-primary-large"
                    >
                        Send Reset Link
                    </button>
                </div>
            </form>
        </Modal.Body>
    </Modal>



OPTIONAL
# passwordresetpage.js
import { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { getAuth, confirmPasswordReset } from 'firebase/auth';
import { Container, Row, Col, Alert } from 'react-bootstrap';

export const PasswordResetPage = () => {
    const [searchParams] = useSearchParams();
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState(false);
    const [validCode, setValidCode] = useState(true);

    const oobCode = searchParams.get('oobCode');
    const auth = getAuth();

    useEffect(() => {
        if (!oobCode) {
            setValidCode(false);
        }
    }, [oobCode]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        if (newPassword !== confirmPassword) {
            setError('Passwords do not match');
            return;
        }

        if (newPassword.length < 6) {
            setError('Password must be at least 6 characters');
            return;
        }

        try {
            await confirmPasswordReset(auth, oobCode, newPassword);
            setSuccess(true);
        } catch (error) {
            setError('Failed to reset password. The link may have expired.');
        }
    };

    if (!validCode) {
        return (
            <section className="auth-section">
                <Container>
                    <Row className="justify-content-center">
                        <Col lg={6}>
                            <Alert variant="danger">
                                Invalid or expired password reset link.
                            </Alert>
                        </Col>
                    </Row>
                </Container>
            </section>
        );
    }

    if (success) {
        return (
            <section className="auth-section">
                <Container>
                    <Row className="justify-content-center">
                        <Col lg={6}>
                            <Alert variant="success">
                                Password reset successful! You can now login with your new password.
                            </Alert>
                            <Link to="/auth?mode=login" className="btn-primary-large">
                                Go to Login
                            </Link>
                        </Col>
                    </Row>
                </Container>
            </section>
        );
    }

    return (
        <section className="auth-section">
            <Container>
                <Row className="justify-content-center">
                    <Col lg={6}>
                        <div className="auth-card">
                            <h2 className="auth-title">Reset Your Password</h2>
                            {error && <Alert variant="danger">{error}</Alert>}
                            
                            <form onSubmit={handleSubmit}>
                                <div className="form-group">
                                    <label className="form-label">New Password</label>
                                    <input
                                        type="password"
                                        className="form-input"
                                        value={newPassword}
                                        onChange={(e) => setNewPassword(e.target.value)}
                                        placeholder="Enter new password"
                                        required
                                    />
                                </div>
                                
                                <div className="form-group">
                                    <label className="form-label">Confirm Password</label>
                                    <input
                                        type="password"
                                        className="form-input"
                                        value={confirmPassword}
                                        onChange={(e) => setConfirmPassword(e.target.value)}
                                        placeholder="Confirm new password"
                                        required
                                    />
                                </div>
                                
                                <button type="submit" className="btn-auth-submit">
                                    Reset Password
                                </button>
                            </form>
                        </div>
                    </Col>
                </Row>
            </Container>
        </section>
    );
};

<Route path="/reset-password" element={<PasswordResetPage />} />